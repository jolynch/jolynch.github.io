<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Distributed Systems as Food Service Analogies on Joey Lynch&#39;s Site</title>
    <link>https://jolynch.github.io/tags/distsys-as-food/</link>
    <description>Recent content in Distributed Systems as Food Service Analogies on Joey Lynch&#39;s Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 25 Feb 2019 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://jolynch.github.io/tags/distsys-as-food/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Jimmy John&#39;s is like a High-Performance Web Service</title>
      <link>https://jolynch.github.io/posts/jimmy_johns_and_web_services/</link>
      <pubDate>Mon, 25 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jolynch.github.io/posts/jimmy_johns_and_web_services/</guid>
      <description>Today on the &amp;ldquo;distributed systems as food service analogy&amp;rdquo; series we visit one of my favorites: sandwich shops.
Most sandwich places are absolutely terrible at efficiently processing my sandwich order. They have limited workers that constantly context switch and are entirely unable to pipeline (looking at you Subway). Jimmy John&amp;rsquo;s, however, is wonderfully efficient and a model for all other sandwich places.
In this post, I will explore how Jimmy John&amp;rsquo;s operates as a high-performance web (micro)service might.</description>
    </item>
    
    <item>
      <title>Supermarkets And Efficient Queueing: Part 2</title>
      <link>https://jolynch.github.io/posts/supermarkets_and_efficient_queueing_part_2/</link>
      <pubDate>Wed, 20 Feb 2019 00:00:00 -0100</pubDate>
      
      <guid>https://jolynch.github.io/posts/supermarkets_and_efficient_queueing_part_2/</guid>
      <description>This post wraps up the two part writeup on queueing theory and understanding computer systems using supermarkets within the larger &amp;ldquo;distributed systems as food service analogy&amp;rdquo; series.
 Part 1: Basics of queueing theory and minimizing latency. Part 2: More advanced techniques past optimizing latency.  We learned in Part 1 that we should keep our queues together and if we must form separate queues we should always try to pick the shortest queue if we can.</description>
    </item>
    
    <item>
      <title>Supermarkets And Efficient Queueing: Part 1</title>
      <link>https://jolynch.github.io/posts/supermarkets_and_efficient_queueing_part_1/</link>
      <pubDate>Tue, 19 Feb 2019 12:00:00 +0000</pubDate>
      
      <guid>https://jolynch.github.io/posts/supermarkets_and_efficient_queueing_part_1/</guid>
      <description>I&amp;rsquo;d like to kick off the &amp;ldquo;distributed systems as food service analogy&amp;rdquo; series with the basics. In this two part post I cover the basics of queueing theory, and how we can understand it with the help of your every day supermarket or grocery store.
 Part 1: Basics of queueing theory and minimizing latency. Part 2: More advanced techniques past optimizing latency.  Why should software engineers care about Queueing Theory?</description>
    </item>
    
  </channel>
</rss>
